import * as react from "react";
import { useState } from "react";
import { z } from "zod";
import { supabase } from "../lib/supabase";

// Define the form schema with validation rules
const contactFormSchema = z.object({
	name: z.string().min(1, { message: "Name is required" }),
	email: z.string().email({ message: "Please enter a valid email address" }),
	message: z
		.string()
		.min(10, { message: "Message must be at least 10 characters long" }),
});

type ContactFormData = z.infer<typeof contactFormSchema>;

export const ContactPage: react.FC = () => {
	const [formData, setFormData] = useState<ContactFormData>({
		name: "",
		email: "",
		message: "",
	});
	const [formErrors, setFormErrors] = useState<Record<string, string>>({});
	const [isSubmitting, setIsSubmitting] = useState(false);
	const [submitStatus, setSubmitStatus] = useState<{
		success: boolean;
		message: string;
	} | null>(null);

	const handleChange = (
		e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
	) => {
		const { name, value } = e.target;
		setFormData(prev => ({
			...prev,
			[name]: value,
		}));
	};

	const handleSubmit = async (e: React.FormEvent) => {
		e.preventDefault();

		// Validate form data
		const validationResult = contactFormSchema.safeParse(formData);

		if (!validationResult.success) {
			// Convert Zod errors to a more usable format
			const errors: Record<string, string> = {};
			validationResult.error.errors.forEach(err => {
				if (err.path) {
					errors[err.path[0]] = err.message;
				}
			});
			setFormErrors(errors);
			return;
		}

		// Clear any previous errors
		setFormErrors({});
		setIsSubmitting(true);
		setSubmitStatus(null);

		try {
			const { error } = await supabase
				.from("contact")
				.insert([
					{
						name: formData.name,
						email: formData.email,
						message: formData.message,
						// id and created_at will be automatically generated by the database
						// status will default to 'unread' as per the table definition
					},
				])
				.select();

			if (error) throw error;

			setSubmitStatus({
				success: true,
				message:
					"Your message has been received! We'll get back to you soon.",
			});
			setFormData({ name: "", email: "", message: "" }); // Reset form
		} catch (error) {
			console.error("Failed to save message:", error);
			setSubmitStatus({
				success: false,
				message: "Failed to send message. Please try again later.",
			});
		} finally {
			setIsSubmitting(false);
		}
	};

	return (
		<div className="fade-in">
			<section className="py-20 bg-gray-100">
				<div className="container mx-auto px-6">
					<div className="max-w-2xl mx-auto bg-white p-8 rounded-lg shadow-lg">
						<h1 className="text-4xl font-bold text-center text-gray-800 mb-8">
							Contact Us
						</h1>
						<p className="text-center text-gray-600 mb-8">
							We'd love to hear from you. Please fill out the form
							below to get in touch.
						</p>

						{submitStatus && (
							<div
								className={`mb-6 p-4 rounded-lg ${
									submitStatus.success
										? "bg-green-100 text-green-800"
										: "bg-red-100 text-red-800"
								}`}>
								{submitStatus.message}
							</div>
						)}

						<form onSubmit={handleSubmit}>
							<div className="mb-4">
								<label
									htmlFor="name"
									className="block text-gray-700 font-bold mb-2">
									Name
								</label>
								<input
									type="text"
									id="name"
									name="name"
									value={formData.name}
									onChange={handleChange}
									className={`w-full px-3 py-2 border rounded-lg text-gray-700 focus:outline-none focus:border-blue-500 ${
										formErrors.name ? "border-red-500" : ""
									}`}
									disabled={isSubmitting}
								/>
								{formErrors.name && (
									<p className="text-red-500 text-sm mt-1">
										{formErrors.name}
									</p>
								)}
							</div>
							<div className="mb-4">
								<label
									htmlFor="email"
									className="block text-gray-700 font-bold mb-2">
									Email
								</label>
								<input
									type="email"
									id="email"
									name="email"
									value={formData.email}
									onChange={handleChange}
									className={`w-full px-3 py-2 border rounded-lg text-gray-700 focus:outline-none focus:border-blue-500 ${
										formErrors.email ? "border-red-500" : ""
									}`}
									disabled={isSubmitting}
								/>
								{formErrors.email && (
									<p className="text-red-500 text-sm mt-1">
										{formErrors.email}
									</p>
								)}
							</div>
							<div className="mb-4">
								<label
									htmlFor="message"
									className="block text-gray-700 font-bold mb-2">
									Message
								</label>
								<textarea
									id="message"
									name="message"
									value={formData.message}
									onChange={handleChange}
									rows={5}
									className={`w-full px-3 py-2 border rounded-lg text-gray-700 focus:outline-none focus:border-blue-500 ${
										formErrors.message
											? "border-red-500"
											: ""
									}`}
									disabled={isSubmitting}></textarea>
								{formErrors.message && (
									<p className="text-red-500 text-sm mt-1">
										{formErrors.message}
									</p>
								)}
							</div>
							<div className="text-center">
								<button
									type="submit"
									disabled={isSubmitting}
									className={`${
										isSubmitting
											? "bg-blue-400"
											: "bg-blue-600 hover:bg-blue-700"
									} text-white inline-block font-bold py-2 px-6 rounded-full transition-all duration-300 ease-in-out transform shadow-md hover:shadow-lg hover:-translate-y-1`}>
									{isSubmitting
										? "Sending..."
										: "Send Message"}
								</button>
							</div>
						</form>
					</div>
				</div>
			</section>
		</div>
	);
};
